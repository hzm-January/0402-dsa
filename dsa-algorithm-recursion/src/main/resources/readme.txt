1. 什么情况下使用递归
a.一个问题的解可以分解为多个子问题的解
b.这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样
c.存在递归终止条件

2. 如何编写递归
a.写出递归公式
b.找出终止条件


3. 递归代码注意点
a. 堆栈溢出
    优化方案：
        1. 限制递归深度
            说明--该方法并不能完全解决，因为深度跟当前栈的剩余空间大小有关，事先并没有办法获取或计算出该剩余空间大小
                    如果实时计算，代码过于复杂，会影响代码可读性。
                    如果深度比较小，可以使用这种方法，比如10、50。
b. 重复计算
    描述：f(5)->f(4)+f(3), f(4)->f(3)+f(1) f(3)被计算了两次
    优化方法：
        1.通过一个数据结构来保存已经求解过的f(n)，每次计算前，判断在数据结构中是否有f(n)的解，如果有，不再进行计算，直接返回值

c. 时间效率
    描述：递归中有很多函数调用，如果调用数量比较大，就会有很大的时间成本
d. 内存消耗
    描述：递归每调用一次，就会在内存栈中保存一次现场数据，所以递归的空间复杂度为O(n)


4. 递归代码是否都可以使用非递归方式实现？-理论上是
a.递归是使用栈实现的，自己也可以手动模拟栈实现递归的方式，这样所有的递归代码都可以改成非递归代码
b.使用非递归方式实现递归代码，并不能解决递归带来的问题，徒增了实现的复杂度


5. 寻找最终推荐人
